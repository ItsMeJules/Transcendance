// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username       String? @unique
  firstName      String?
  lastName       String?
  email          String  @unique
  profilePicture String?
  hash           String
  isOnline       Boolean @default(false)
  isPlaying      Boolean @default(false)

  gamesPlayed Int?     @default(0)
  gamesWon    Int?     @default(0)
  userPoints  Int?     @default(0)
  userLevel   Decimal? @default(0)

  // Field for representing friends
  friends   User[] @relation("UserFriends")
  // Opposite relation field
  friendsOf User[] @relation("UserFriends")

  isTwoFactorAuthenticationEnabled  Boolean @default(false)
  twoFactorAuthenticationSecret     String?
  
  // Game
  player1Games Game[] @relation("Player1")
  player2Games Game[] @relation("Player2")
  wonGames Game[] @relation("Winner")
  lostGames Game[] @relation("Loser")
  
  // gamesList Game[]
  @@map("users")
}

model Game {
  id       Int @id @unique @default(autoincrement())
  gameMode Int
  dateGame     DateTime @default(now())

  player1 User @relation("Player1", fields: [player1Id], references: [id])
  player1Id Int

  player2 User @relation("Player2", fields: [player2Id], references: [id])
  player2Id Int

  winner User? @relation("Winner", fields: [winnerId], references: [id])
  winnerId Int?

  loser User? @relation("Loser", fields: [loserId], references: [id])
  loserId Int?

  player1Score Int @default(0)
  player2Score Int @default(0)
}

